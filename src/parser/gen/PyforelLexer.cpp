
  #include "PyforelParser.h"


// Generated from /home/andersonjwan/Projects/pyforel/build/antlr/grammars/PyforelLexer.g4 by ANTLR 4.12.0


#include "PyforelLexer.h"


using namespace antlr4;

using namespace gen;


using namespace antlr4;

namespace {

struct PyforelLexerStaticData final {
  PyforelLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  PyforelLexerStaticData(const PyforelLexerStaticData&) = delete;
  PyforelLexerStaticData(PyforelLexerStaticData&&) = delete;
  PyforelLexerStaticData& operator=(const PyforelLexerStaticData&) = delete;
  PyforelLexerStaticData& operator=(PyforelLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag pyforellexerLexerOnceFlag;
PyforelLexerStaticData *pyforellexerLexerStaticData = nullptr;

void pyforellexerLexerInitialize() {
  assert(pyforellexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<PyforelLexerStaticData>(
    std::vector<std::string>{
      "Newline", "If", "ElseIf", "Else", "Not", "And", "Or", "Fn", "Eventually", 
      "Always", "Next", "Within", "With", "Keep", "Upto", "Release", "In", 
      "From", "To", "True", "False", "Exists", "Forall", "AtWord", "At", 
      "Ampersand", "Apostrophe", "Asterick", "Bar", "Caret", "Colon", "Comma", 
      "DollarSign", "Dot", "Equal", "ExclamationMark", "GraveAccent", "Hash", 
      "Minus", "PercentSign", "Plus", "QuestionMark", "QuotationMark", "Semicolon", 
      "Tilde", "Underscore", "Slash", "Backslash", "LeftBrace", "RightBrace", 
      "LeftBracket", "RightBracket", "LeftChevron", "RightChevron", "LeftParenthesis", 
      "RightParenthesis", "BlockComment", "LineComment", "Infinity", "Scalar", 
      "Integer", "DecimalInteger", "BinaryInteger", "OctalInteger", "HexInteger", 
      "Floating", "PointFloat", "ExponentFloat", "Identifier", "LETTER", 
      "NONDIGIT", "BINDIGIT", "HEXDIGIT", "OCTALDIGIT", "FRACTION", "EXPONENT", 
      "NONZERODIGIT", "DIGIT", "Whitespace"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "", "", "", "'if'", "'elif'", "'else'", "'not'", "'and'", "'or'", 
      "'fn'", "'eventually'", "'always'", "'next'", "'within'", "'with'", 
      "'keep'", "'upto'", "'release'", "'in'", "'from'", "'to'", "'true'", 
      "'false'", "'exists'", "'forall'", "'at'", "'@'", "'&'", "'''", "'*'", 
      "'|'", "'^'", "':'", "','", "'$'", "'.'", "'='", "'!'", "'`'", "'#'", 
      "'-'", "'%'", "'+'", "'\\u003F'", "'\"'", "';'", "'~'", "'_'", "'/'", 
      "'\\'", "'{'", "'}'", "'['", "']'", "'<'", "'>'", "'('", "')'", "", 
      "", "'inf'"
    },
    std::vector<std::string>{
      "", "Indent", "Dedent", "Newline", "If", "ElseIf", "Else", "Not", 
      "And", "Or", "Fn", "Eventually", "Always", "Next", "Within", "With", 
      "Keep", "Upto", "Release", "In", "From", "To", "True", "False", "Exists", 
      "Forall", "AtWord", "At", "Ampersand", "Apostrophe", "Asterick", "Bar", 
      "Caret", "Colon", "Comma", "DollarSign", "Dot", "Equal", "ExclamationMark", 
      "GraveAccent", "Hash", "Minus", "PercentSign", "Plus", "QuestionMark", 
      "QuotationMark", "Semicolon", "Tilde", "Underscore", "Slash", "Backslash", 
      "LeftBrace", "RightBrace", "LeftBracket", "RightBracket", "LeftChevron", 
      "RightChevron", "LeftParenthesis", "RightParenthesis", "BlockComment", 
      "LineComment", "Infinity", "Scalar", "Integer", "DecimalInteger", 
      "BinaryInteger", "OctalInteger", "HexInteger", "Floating", "PointFloat", 
      "ExponentFloat", "Identifier", "Whitespace"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,72,518,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,1,0,1,0,1,0,3,0,163,8,0,1,0,1,0,3,0,167,8,0,1,0,3,0,170,
  	8,0,3,0,172,8,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,
  	3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,
  	1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,
  	1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,
  	1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,
  	1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,
  	1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,
  	1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
  	1,23,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,
  	1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,
  	1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,
  	1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,
  	1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,56,
  	1,56,5,56,363,8,56,10,56,12,56,366,9,56,1,56,1,56,1,56,1,56,1,56,1,57,
  	1,57,1,57,1,57,5,57,377,8,57,10,57,12,57,380,9,57,1,57,3,57,383,8,57,
  	1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,59,1,59,3,59,395,8,59,1,60,
  	1,60,1,60,1,60,3,60,401,8,60,1,61,1,61,5,61,405,8,61,10,61,12,61,408,
  	9,61,1,61,4,61,411,8,61,11,61,12,61,412,3,61,415,8,61,1,62,1,62,1,62,
  	4,62,420,8,62,11,62,12,62,421,1,63,1,63,1,63,4,63,427,8,63,11,63,12,63,
  	428,1,64,1,64,1,64,4,64,434,8,64,11,64,12,64,435,1,65,1,65,3,65,440,8,
  	65,1,66,4,66,443,8,66,11,66,12,66,444,3,66,447,8,66,1,66,1,66,4,66,451,
  	8,66,11,66,12,66,452,1,66,1,66,3,66,457,8,66,1,67,4,67,460,8,67,11,67,
  	12,67,461,1,67,3,67,465,8,67,1,67,1,67,1,68,4,68,470,8,68,11,68,12,68,
  	471,1,68,1,68,5,68,476,8,68,10,68,12,68,479,9,68,1,69,1,69,1,70,1,70,
  	3,70,485,8,70,1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,4,74,495,8,74,11,
  	74,12,74,496,1,75,1,75,3,75,501,8,75,1,75,4,75,504,8,75,11,75,12,75,505,
  	1,76,1,76,1,77,1,77,1,78,4,78,513,8,78,11,78,12,78,514,1,78,1,78,2,364,
  	378,0,79,1,3,3,4,5,5,7,6,9,7,11,8,13,9,15,10,17,11,19,12,21,13,23,14,
  	25,15,27,16,29,17,31,18,33,19,35,20,37,21,39,22,41,23,43,24,45,25,47,
  	26,49,27,51,28,53,29,55,30,57,31,59,32,61,33,63,34,65,35,67,36,69,37,
  	71,38,73,39,75,40,77,41,79,42,81,43,83,44,85,45,87,46,89,47,91,48,93,
  	49,95,50,97,51,99,52,101,53,103,54,105,55,107,56,109,57,111,58,113,59,
  	115,60,117,61,119,62,121,63,123,64,125,65,127,66,129,67,131,68,133,69,
  	135,70,137,71,139,0,141,0,143,0,145,0,147,0,149,0,151,0,153,0,155,0,157,
  	72,1,0,12,2,0,66,66,98,98,2,0,79,79,111,111,2,0,88,88,120,120,2,0,65,
  	90,97,122,1,0,48,49,3,0,48,57,65,70,97,102,1,0,48,55,2,0,69,69,101,101,
  	2,0,43,43,45,45,1,0,49,57,1,0,48,57,2,0,9,9,32,32,540,0,1,1,0,0,0,0,3,
  	1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
  	0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
  	1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,
  	0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,
  	0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
  	1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,
  	0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,
  	0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,
  	1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,
  	0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,
  	0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,
  	0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,
  	0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,157,1,0,
  	0,0,1,171,1,0,0,0,3,175,1,0,0,0,5,178,1,0,0,0,7,183,1,0,0,0,9,188,1,0,
  	0,0,11,192,1,0,0,0,13,196,1,0,0,0,15,199,1,0,0,0,17,202,1,0,0,0,19,213,
  	1,0,0,0,21,220,1,0,0,0,23,225,1,0,0,0,25,232,1,0,0,0,27,237,1,0,0,0,29,
  	242,1,0,0,0,31,247,1,0,0,0,33,255,1,0,0,0,35,258,1,0,0,0,37,263,1,0,0,
  	0,39,266,1,0,0,0,41,271,1,0,0,0,43,277,1,0,0,0,45,284,1,0,0,0,47,291,
  	1,0,0,0,49,294,1,0,0,0,51,296,1,0,0,0,53,298,1,0,0,0,55,300,1,0,0,0,57,
  	302,1,0,0,0,59,304,1,0,0,0,61,306,1,0,0,0,63,308,1,0,0,0,65,310,1,0,0,
  	0,67,312,1,0,0,0,69,314,1,0,0,0,71,316,1,0,0,0,73,318,1,0,0,0,75,320,
  	1,0,0,0,77,322,1,0,0,0,79,324,1,0,0,0,81,326,1,0,0,0,83,328,1,0,0,0,85,
  	330,1,0,0,0,87,332,1,0,0,0,89,334,1,0,0,0,91,336,1,0,0,0,93,338,1,0,0,
  	0,95,340,1,0,0,0,97,342,1,0,0,0,99,344,1,0,0,0,101,346,1,0,0,0,103,348,
  	1,0,0,0,105,350,1,0,0,0,107,352,1,0,0,0,109,354,1,0,0,0,111,356,1,0,0,
  	0,113,358,1,0,0,0,115,372,1,0,0,0,117,388,1,0,0,0,119,394,1,0,0,0,121,
  	400,1,0,0,0,123,414,1,0,0,0,125,416,1,0,0,0,127,423,1,0,0,0,129,430,1,
  	0,0,0,131,439,1,0,0,0,133,456,1,0,0,0,135,464,1,0,0,0,137,469,1,0,0,0,
  	139,480,1,0,0,0,141,484,1,0,0,0,143,486,1,0,0,0,145,488,1,0,0,0,147,490,
  	1,0,0,0,149,492,1,0,0,0,151,498,1,0,0,0,153,507,1,0,0,0,155,509,1,0,0,
  	0,157,512,1,0,0,0,159,160,4,0,0,0,160,172,3,157,78,0,161,163,5,13,0,0,
  	162,161,1,0,0,0,162,163,1,0,0,0,163,164,1,0,0,0,164,167,5,10,0,0,165,
  	167,2,12,13,0,166,162,1,0,0,0,166,165,1,0,0,0,167,169,1,0,0,0,168,170,
  	3,157,78,0,169,168,1,0,0,0,169,170,1,0,0,0,170,172,1,0,0,0,171,159,1,
  	0,0,0,171,166,1,0,0,0,172,173,1,0,0,0,173,174,6,0,0,0,174,2,1,0,0,0,175,
  	176,5,105,0,0,176,177,5,102,0,0,177,4,1,0,0,0,178,179,5,101,0,0,179,180,
  	5,108,0,0,180,181,5,105,0,0,181,182,5,102,0,0,182,6,1,0,0,0,183,184,5,
  	101,0,0,184,185,5,108,0,0,185,186,5,115,0,0,186,187,5,101,0,0,187,8,1,
  	0,0,0,188,189,5,110,0,0,189,190,5,111,0,0,190,191,5,116,0,0,191,10,1,
  	0,0,0,192,193,5,97,0,0,193,194,5,110,0,0,194,195,5,100,0,0,195,12,1,0,
  	0,0,196,197,5,111,0,0,197,198,5,114,0,0,198,14,1,0,0,0,199,200,5,102,
  	0,0,200,201,5,110,0,0,201,16,1,0,0,0,202,203,5,101,0,0,203,204,5,118,
  	0,0,204,205,5,101,0,0,205,206,5,110,0,0,206,207,5,116,0,0,207,208,5,117,
  	0,0,208,209,5,97,0,0,209,210,5,108,0,0,210,211,5,108,0,0,211,212,5,121,
  	0,0,212,18,1,0,0,0,213,214,5,97,0,0,214,215,5,108,0,0,215,216,5,119,0,
  	0,216,217,5,97,0,0,217,218,5,121,0,0,218,219,5,115,0,0,219,20,1,0,0,0,
  	220,221,5,110,0,0,221,222,5,101,0,0,222,223,5,120,0,0,223,224,5,116,0,
  	0,224,22,1,0,0,0,225,226,5,119,0,0,226,227,5,105,0,0,227,228,5,116,0,
  	0,228,229,5,104,0,0,229,230,5,105,0,0,230,231,5,110,0,0,231,24,1,0,0,
  	0,232,233,5,119,0,0,233,234,5,105,0,0,234,235,5,116,0,0,235,236,5,104,
  	0,0,236,26,1,0,0,0,237,238,5,107,0,0,238,239,5,101,0,0,239,240,5,101,
  	0,0,240,241,5,112,0,0,241,28,1,0,0,0,242,243,5,117,0,0,243,244,5,112,
  	0,0,244,245,5,116,0,0,245,246,5,111,0,0,246,30,1,0,0,0,247,248,5,114,
  	0,0,248,249,5,101,0,0,249,250,5,108,0,0,250,251,5,101,0,0,251,252,5,97,
  	0,0,252,253,5,115,0,0,253,254,5,101,0,0,254,32,1,0,0,0,255,256,5,105,
  	0,0,256,257,5,110,0,0,257,34,1,0,0,0,258,259,5,102,0,0,259,260,5,114,
  	0,0,260,261,5,111,0,0,261,262,5,109,0,0,262,36,1,0,0,0,263,264,5,116,
  	0,0,264,265,5,111,0,0,265,38,1,0,0,0,266,267,5,116,0,0,267,268,5,114,
  	0,0,268,269,5,117,0,0,269,270,5,101,0,0,270,40,1,0,0,0,271,272,5,102,
  	0,0,272,273,5,97,0,0,273,274,5,108,0,0,274,275,5,115,0,0,275,276,5,101,
  	0,0,276,42,1,0,0,0,277,278,5,101,0,0,278,279,5,120,0,0,279,280,5,105,
  	0,0,280,281,5,115,0,0,281,282,5,116,0,0,282,283,5,115,0,0,283,44,1,0,
  	0,0,284,285,5,102,0,0,285,286,5,111,0,0,286,287,5,114,0,0,287,288,5,97,
  	0,0,288,289,5,108,0,0,289,290,5,108,0,0,290,46,1,0,0,0,291,292,5,97,0,
  	0,292,293,5,116,0,0,293,48,1,0,0,0,294,295,5,64,0,0,295,50,1,0,0,0,296,
  	297,5,38,0,0,297,52,1,0,0,0,298,299,5,39,0,0,299,54,1,0,0,0,300,301,5,
  	42,0,0,301,56,1,0,0,0,302,303,5,124,0,0,303,58,1,0,0,0,304,305,5,94,0,
  	0,305,60,1,0,0,0,306,307,5,58,0,0,307,62,1,0,0,0,308,309,5,44,0,0,309,
  	64,1,0,0,0,310,311,5,36,0,0,311,66,1,0,0,0,312,313,5,46,0,0,313,68,1,
  	0,0,0,314,315,5,61,0,0,315,70,1,0,0,0,316,317,5,33,0,0,317,72,1,0,0,0,
  	318,319,5,96,0,0,319,74,1,0,0,0,320,321,5,35,0,0,321,76,1,0,0,0,322,323,
  	5,45,0,0,323,78,1,0,0,0,324,325,5,37,0,0,325,80,1,0,0,0,326,327,5,43,
  	0,0,327,82,1,0,0,0,328,329,5,63,0,0,329,84,1,0,0,0,330,331,5,34,0,0,331,
  	86,1,0,0,0,332,333,5,59,0,0,333,88,1,0,0,0,334,335,5,126,0,0,335,90,1,
  	0,0,0,336,337,5,95,0,0,337,92,1,0,0,0,338,339,5,47,0,0,339,94,1,0,0,0,
  	340,341,5,92,0,0,341,96,1,0,0,0,342,343,5,123,0,0,343,98,1,0,0,0,344,
  	345,5,125,0,0,345,100,1,0,0,0,346,347,5,91,0,0,347,102,1,0,0,0,348,349,
  	5,93,0,0,349,104,1,0,0,0,350,351,5,60,0,0,351,106,1,0,0,0,352,353,5,62,
  	0,0,353,108,1,0,0,0,354,355,5,40,0,0,355,110,1,0,0,0,356,357,5,41,0,0,
  	357,112,1,0,0,0,358,359,5,47,0,0,359,360,5,42,0,0,360,364,1,0,0,0,361,
  	363,9,0,0,0,362,361,1,0,0,0,363,366,1,0,0,0,364,365,1,0,0,0,364,362,1,
  	0,0,0,365,367,1,0,0,0,366,364,1,0,0,0,367,368,5,42,0,0,368,369,5,47,0,
  	0,369,370,1,0,0,0,370,371,6,56,1,0,371,114,1,0,0,0,372,373,5,47,0,0,373,
  	374,5,47,0,0,374,378,1,0,0,0,375,377,9,0,0,0,376,375,1,0,0,0,377,380,
  	1,0,0,0,378,379,1,0,0,0,378,376,1,0,0,0,379,382,1,0,0,0,380,378,1,0,0,
  	0,381,383,5,13,0,0,382,381,1,0,0,0,382,383,1,0,0,0,383,384,1,0,0,0,384,
  	385,5,10,0,0,385,386,1,0,0,0,386,387,6,57,1,0,387,116,1,0,0,0,388,389,
  	5,105,0,0,389,390,5,110,0,0,390,391,5,102,0,0,391,118,1,0,0,0,392,395,
  	3,121,60,0,393,395,3,131,65,0,394,392,1,0,0,0,394,393,1,0,0,0,395,120,
  	1,0,0,0,396,401,3,123,61,0,397,401,3,125,62,0,398,401,3,127,63,0,399,
  	401,3,129,64,0,400,396,1,0,0,0,400,397,1,0,0,0,400,398,1,0,0,0,400,399,
  	1,0,0,0,401,122,1,0,0,0,402,406,3,153,76,0,403,405,3,155,77,0,404,403,
  	1,0,0,0,405,408,1,0,0,0,406,404,1,0,0,0,406,407,1,0,0,0,407,415,1,0,0,
  	0,408,406,1,0,0,0,409,411,5,48,0,0,410,409,1,0,0,0,411,412,1,0,0,0,412,
  	410,1,0,0,0,412,413,1,0,0,0,413,415,1,0,0,0,414,402,1,0,0,0,414,410,1,
  	0,0,0,415,124,1,0,0,0,416,417,5,48,0,0,417,419,7,0,0,0,418,420,3,143,
  	71,0,419,418,1,0,0,0,420,421,1,0,0,0,421,419,1,0,0,0,421,422,1,0,0,0,
  	422,126,1,0,0,0,423,424,5,48,0,0,424,426,7,1,0,0,425,427,3,147,73,0,426,
  	425,1,0,0,0,427,428,1,0,0,0,428,426,1,0,0,0,428,429,1,0,0,0,429,128,1,
  	0,0,0,430,431,5,48,0,0,431,433,7,2,0,0,432,434,3,145,72,0,433,432,1,0,
  	0,0,434,435,1,0,0,0,435,433,1,0,0,0,435,436,1,0,0,0,436,130,1,0,0,0,437,
  	440,3,133,66,0,438,440,3,135,67,0,439,437,1,0,0,0,439,438,1,0,0,0,440,
  	132,1,0,0,0,441,443,3,155,77,0,442,441,1,0,0,0,443,444,1,0,0,0,444,442,
  	1,0,0,0,444,445,1,0,0,0,445,447,1,0,0,0,446,442,1,0,0,0,446,447,1,0,0,
  	0,447,448,1,0,0,0,448,457,3,149,74,0,449,451,3,155,77,0,450,449,1,0,0,
  	0,451,452,1,0,0,0,452,450,1,0,0,0,452,453,1,0,0,0,453,454,1,0,0,0,454,
  	455,5,46,0,0,455,457,1,0,0,0,456,446,1,0,0,0,456,450,1,0,0,0,457,134,
  	1,0,0,0,458,460,3,155,77,0,459,458,1,0,0,0,460,461,1,0,0,0,461,459,1,
  	0,0,0,461,462,1,0,0,0,462,465,1,0,0,0,463,465,3,133,66,0,464,459,1,0,
  	0,0,464,463,1,0,0,0,465,466,1,0,0,0,466,467,3,151,75,0,467,136,1,0,0,
  	0,468,470,3,141,70,0,469,468,1,0,0,0,470,471,1,0,0,0,471,469,1,0,0,0,
  	471,472,1,0,0,0,472,477,1,0,0,0,473,476,3,141,70,0,474,476,3,155,77,0,
  	475,473,1,0,0,0,475,474,1,0,0,0,476,479,1,0,0,0,477,475,1,0,0,0,477,478,
  	1,0,0,0,478,138,1,0,0,0,479,477,1,0,0,0,480,481,7,3,0,0,481,140,1,0,0,
  	0,482,485,3,139,69,0,483,485,5,95,0,0,484,482,1,0,0,0,484,483,1,0,0,0,
  	485,142,1,0,0,0,486,487,7,4,0,0,487,144,1,0,0,0,488,489,7,5,0,0,489,146,
  	1,0,0,0,490,491,7,6,0,0,491,148,1,0,0,0,492,494,5,46,0,0,493,495,3,155,
  	77,0,494,493,1,0,0,0,495,496,1,0,0,0,496,494,1,0,0,0,496,497,1,0,0,0,
  	497,150,1,0,0,0,498,500,7,7,0,0,499,501,7,8,0,0,500,499,1,0,0,0,500,501,
  	1,0,0,0,501,503,1,0,0,0,502,504,3,155,77,0,503,502,1,0,0,0,504,505,1,
  	0,0,0,505,503,1,0,0,0,505,506,1,0,0,0,506,152,1,0,0,0,507,508,7,9,0,0,
  	508,154,1,0,0,0,509,510,7,10,0,0,510,156,1,0,0,0,511,513,7,11,0,0,512,
  	511,1,0,0,0,513,514,1,0,0,0,514,512,1,0,0,0,514,515,1,0,0,0,515,516,1,
  	0,0,0,516,517,6,78,1,0,517,158,1,0,0,0,31,0,162,166,169,171,364,378,382,
  	394,400,406,412,414,421,428,435,439,444,446,452,456,461,464,471,475,477,
  	484,496,500,505,514,2,1,0,0,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  pyforellexerLexerStaticData = staticData.release();
}

}

PyforelLexer::PyforelLexer(CharStream *input) : Lexer(input) {
  PyforelLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *pyforellexerLexerStaticData->atn, pyforellexerLexerStaticData->decisionToDFA, pyforellexerLexerStaticData->sharedContextCache);
}

PyforelLexer::~PyforelLexer() {
  delete _interpreter;
}

std::string PyforelLexer::getGrammarFileName() const {
  return "PyforelLexer.g4";
}

const std::vector<std::string>& PyforelLexer::getRuleNames() const {
  return pyforellexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& PyforelLexer::getChannelNames() const {
  return pyforellexerLexerStaticData->channelNames;
}

const std::vector<std::string>& PyforelLexer::getModeNames() const {
  return pyforellexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& PyforelLexer::getVocabulary() const {
  return pyforellexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView PyforelLexer::getSerializedATN() const {
  return pyforellexerLexerStaticData->serializedATN;
}

const atn::ATN& PyforelLexer::getATN() const {
  return *pyforellexerLexerStaticData->atn;
}


void PyforelLexer::action(RuleContext *context, size_t ruleIndex, size_t actionIndex) {
  switch (ruleIndex) {
    case 0: NewlineAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;

  default:
    break;
  }
}

bool PyforelLexer::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 0: return NewlineSempred(antlrcpp::downCast<antlr4::RuleContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

void PyforelLexer::NewlineAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 0: 
                {	 
                    std::string newLine, spaces;
                    std::string text = getText();
                    for(char c : text)
                        {
                            if ((c == '\r') || (c == '\n') || (c == '\f'))
                                newLine.push_back(c);
                            else
                                spaces.push_back(c);
                        }


                    // Strip newlines inside open clauses except if we are near EOF. We keep Newlines near EOF to
                    // satisfy the final newline needed by the single_put rule used by the REPL.
                    int next = _input->LA(1);
                    int nextnext = _input->LA(2);
                    if (m_opened > 0 || (nextnext != -1 && (next == '\r' || next == '\n' || next == '\f' || next == '#'))) {
                        // If we're inside a list or on a blank line, ignore all indents, 
                        // dedents and line breaks.
                        skip();
                    }
                    else {
                        emit(commonToken(Newline, newLine));
                        int indent = getIndentationCount(spaces);
                        int previous = m_indents.empty() ? 0 : m_indents.top();
                        if (indent == previous) {
                            // skip indents of the same size as the present indent-size
                            skip();
                        }
                        else if (indent > previous) {
                            m_indents.push(indent);
                            emit(commonToken(PyforelParser::Indent, spaces));
                        }
                        else {
                            // Possibly emit more than 1 Dedent token.
                            while(!m_indents.empty() && m_indents.top() > indent) {
                                emit(createDedent());
                                m_indents.pop();
                            }
                        }
                    }
                }
             break;

  default:
    break;
  }
}


bool PyforelLexer::NewlineSempred(antlr4::RuleContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return atStartOfInput();

  default:
    break;
  }
  return true;
}


void PyforelLexer::initialize() {
  ::antlr4::internal::call_once(pyforellexerLexerOnceFlag, pyforellexerLexerInitialize);
}
